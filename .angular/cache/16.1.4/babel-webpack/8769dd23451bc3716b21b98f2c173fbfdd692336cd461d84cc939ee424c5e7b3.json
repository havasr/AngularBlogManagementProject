{"ast":null,"code":"import { defaultcategories } from 'src/assets/defaultcategories';\nimport * as i0 from \"@angular/core\";\nexport class CategoryService {\n  constructor() {\n    this.categories = [];\n  }\n  getCategories() {\n    return this.categories;\n  }\n  setCategories() {\n    this.categories = defaultcategories;\n  }\n  deleteCategory($event) {\n    this.categories = this.categories.filter(category => category.categoryId !== $event);\n  }\n  getCategoryById(id) {\n    return this.categories.find(category => category.categoryId === id);\n  }\n  updatedCategory(updatedCategory) {\n    this.categories = this.categories.map(category => {\n      if (category.categoryId === updatedCategory.categoryId) {\n        category = updatedCategory;\n      }\n      return category;\n    });\n  }\n  addCategory(newName, newDate) {\n    const newCategory = {\n      categoryId: this.getCategories()[this.getCategories().length - 1].categoryId + 1,\n      name: newName,\n      creationDate: newDate\n    };\n    if (this.checkUniqueCategory(newCategory.name, newCategory.categoryId) === true) this.categories.push(newCategory);else alert(\"This category already exists.\");\n  }\n  findCategoryByName(name) {\n    return this.categories.find(category => category.name === name);\n  }\n  checkUniqueCategory(name, id) {\n    if (this.categories.find(category => category.name === name.toLowerCase()) !== undefined && this.findCategoryByName(name.toLowerCase()).categoryId !== id) return false;else return true;\n  }\n}\nCategoryService.ɵfac = function CategoryService_Factory(t) {\n  return new (t || CategoryService)();\n};\nCategoryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CategoryService,\n  factory: CategoryService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["defaultcategories","CategoryService","constructor","categories","getCategories","setCategories","deleteCategory","$event","filter","category","categoryId","getCategoryById","id","find","updatedCategory","map","addCategory","newName","newDate","newCategory","length","name","creationDate","checkUniqueCategory","push","alert","findCategoryByName","toLowerCase","undefined","factory","ɵfac","providedIn"],"sources":["C:\\Users\\PC\\Allianz-ANGULAR\\patika-ng\\src\\app\\category\\category.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Category } from './category';\nimport { defaultcategories } from 'src/assets/defaultcategories';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CategoryService {\n  private categories: Category[] = [];\n\n  constructor() {}\n\n  getCategories(): Category[] {\n    return this.categories;\n  }\n\n  setCategories(): void {\n    this.categories = defaultcategories;\n  }\n\n  deleteCategory($event: number) {\n    this.categories = this.categories.filter(\n      (category) => category.categoryId !== $event\n    );\n  }\n\n  getCategoryById(id: number): Category | undefined {\n    return this.categories.find((category) => category.categoryId === id);\n  }\n\n  updatedCategory(updatedCategory: Category) {\n    this.categories = this.categories.map((category) => {\n      if (category.categoryId === updatedCategory.categoryId) {\n        category = updatedCategory;\n      }\n      return category;\n    });\n  }\n\n  addCategory(newName: string, newDate: string) {\n    const newCategory: Category = {\n      categoryId:\n        this.getCategories()[this.getCategories().length - 1].categoryId + 1,\n      name: newName,\n      creationDate: newDate,\n    };\n    if (this.checkUniqueCategory(newCategory.name, newCategory.categoryId) ===\n      true\n    )\n      this.categories.push(newCategory);\n      else\n      alert(\"This category already exists.\")\n  }\n\n  findCategoryByName(name: string) {\n    return this.categories.find((category) => category.name === name);\n  }\n\n  checkUniqueCategory(name: string, id: number): boolean {\n    if (\n      this.categories.find(\n        (category) => category.name === name.toLowerCase()\n      ) !== undefined &&\n      this.findCategoryByName(name.toLowerCase())!.categoryId !== id\n    )\n      return false;\n    else return true;\n  }\n}\n"],"mappings":"AAEA,SAASA,iBAAiB,QAAQ,8BAA8B;;AAKhE,OAAM,MAAOC,eAAe;EAG1BC,YAAA;IAFQ,KAAAC,UAAU,GAAe,EAAE;EAEpB;EAEfC,aAAaA,CAAA;IACX,OAAO,IAAI,CAACD,UAAU;EACxB;EAEAE,aAAaA,CAAA;IACX,IAAI,CAACF,UAAU,GAAGH,iBAAiB;EACrC;EAEAM,cAAcA,CAACC,MAAc;IAC3B,IAAI,CAACJ,UAAU,GAAG,IAAI,CAACA,UAAU,CAACK,MAAM,CACrCC,QAAQ,IAAKA,QAAQ,CAACC,UAAU,KAAKH,MAAM,CAC7C;EACH;EAEAI,eAAeA,CAACC,EAAU;IACxB,OAAO,IAAI,CAACT,UAAU,CAACU,IAAI,CAAEJ,QAAQ,IAAKA,QAAQ,CAACC,UAAU,KAAKE,EAAE,CAAC;EACvE;EAEAE,eAAeA,CAACA,eAAyB;IACvC,IAAI,CAACX,UAAU,GAAG,IAAI,CAACA,UAAU,CAACY,GAAG,CAAEN,QAAQ,IAAI;MACjD,IAAIA,QAAQ,CAACC,UAAU,KAAKI,eAAe,CAACJ,UAAU,EAAE;QACtDD,QAAQ,GAAGK,eAAe;;MAE5B,OAAOL,QAAQ;IACjB,CAAC,CAAC;EACJ;EAEAO,WAAWA,CAACC,OAAe,EAAEC,OAAe;IAC1C,MAAMC,WAAW,GAAa;MAC5BT,UAAU,EACR,IAAI,CAACN,aAAa,EAAE,CAAC,IAAI,CAACA,aAAa,EAAE,CAACgB,MAAM,GAAG,CAAC,CAAC,CAACV,UAAU,GAAG,CAAC;MACtEW,IAAI,EAAEJ,OAAO;MACbK,YAAY,EAAEJ;KACf;IACD,IAAI,IAAI,CAACK,mBAAmB,CAACJ,WAAW,CAACE,IAAI,EAAEF,WAAW,CAACT,UAAU,CAAC,KACpE,IAAI,EAEJ,IAAI,CAACP,UAAU,CAACqB,IAAI,CAACL,WAAW,CAAC,CAAC,KAElCM,KAAK,CAAC,+BAA+B,CAAC;EAC1C;EAEAC,kBAAkBA,CAACL,IAAY;IAC7B,OAAO,IAAI,CAAClB,UAAU,CAACU,IAAI,CAAEJ,QAAQ,IAAKA,QAAQ,CAACY,IAAI,KAAKA,IAAI,CAAC;EACnE;EAEAE,mBAAmBA,CAACF,IAAY,EAAET,EAAU;IAC1C,IACE,IAAI,CAACT,UAAU,CAACU,IAAI,CACjBJ,QAAQ,IAAKA,QAAQ,CAACY,IAAI,KAAKA,IAAI,CAACM,WAAW,EAAE,CACnD,KAAKC,SAAS,IACf,IAAI,CAACF,kBAAkB,CAACL,IAAI,CAACM,WAAW,EAAE,CAAE,CAACjB,UAAU,KAAKE,EAAE,EAE9D,OAAO,KAAK,CAAC,KACV,OAAO,IAAI;EAClB;;AA5DWX,eAAe,C;mBAAfA,eAAe;AAAA;AAAfA,eAAe,C;SAAfA,eAAe;EAAA4B,OAAA,EAAf5B,eAAe,CAAA6B,IAAA;EAAAC,UAAA,EAFd;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}