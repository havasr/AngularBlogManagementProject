{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let CategoryListComponent = class CategoryListComponent {\n  constructor(categoryService, router, postService) {\n    this.categoryService = categoryService;\n    this.router = router;\n    this.postService = postService;\n    this.categories = [];\n    this.pagedData = [];\n    this.newCategoryName = '';\n    this.newCategoryDate = '';\n    this.currentPage = 1;\n    this.itemsPerPage = 10;\n    this.addCategoryForm = false;\n    if (this.categoryService.getCategories().length === 0) this.categoryService.setCategories();\n    this.categories = this.categoryService.getCategories();\n  }\n  handleDeleteClick($event) {\n    this.categoryService.deleteCategory($event);\n    this.categories = this.categoryService.getCategories();\n  }\n  handleDetailClick($event) {\n    this.router.navigate(['categorylist', $event]);\n  }\n  ngOnInit() {\n    this.pageChanged(this.currentPage);\n  }\n  pageChanged(page) {\n    const startIndex = (page - 1) * this.itemsPerPage;\n    const endIndex = startIndex + this.itemsPerPage;\n    this.pagedData = this.categories.slice(startIndex, endIndex);\n    this.currentPage = page;\n    if (this.pagedData.length === 0 && this.currentPage > 1) this.previousPage();\n  }\n  previousPage() {\n    if (this.currentPage > 1) {\n      this.currentPage--;\n      this.pageChanged(this.currentPage);\n    }\n  }\n  nextPage() {\n    if (this.currentPage < this.totalPages) {\n      this.currentPage++;\n      this.pageChanged(this.currentPage);\n    }\n  }\n  get totalPages() {\n    return Math.ceil(this.categories.length / this.itemsPerPage);\n  }\n  handleAddCategory() {\n    this.addCategoryForm = !this.addCategoryForm;\n  }\n  handleSaveClick() {\n    if (this.newCategoryName == '' || this.newCategoryDate === '') alert('Name or Creation Date cannot be empty.');else {\n      this.categoryService.addCategory(this.newCategoryName, this.newCategoryDate);\n      this.pageChanged(this.currentPage);\n      this.handleCancelClick();\n    }\n  }\n  handleCancelClick() {\n    this.addCategoryForm = false;\n    this.newCategoryName = '';\n    this.newCategoryDate = '';\n  }\n};\nCategoryListComponent = __decorate([Component({\n  selector: 'app-category-list',\n  templateUrl: './category-list.component.html',\n  styleUrls: ['./category-list.component.css']\n})], CategoryListComponent);","map":{"version":3,"names":["Component","CategoryListComponent","constructor","categoryService","router","postService","categories","pagedData","newCategoryName","newCategoryDate","currentPage","itemsPerPage","addCategoryForm","getCategories","length","setCategories","handleDeleteClick","$event","deleteCategory","handleDetailClick","navigate","ngOnInit","pageChanged","page","startIndex","endIndex","slice","previousPage","nextPage","totalPages","Math","ceil","handleAddCategory","handleSaveClick","alert","addCategory","handleCancelClick","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\PC\\Allianz-ANGULAR\\patika-ng\\src\\app\\category\\category-list\\category-list.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Category } from '../category';\nimport { CategoryService } from '../category.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-category-list',\n  templateUrl: './category-list.component.html',\n  styleUrls: ['./category-list.component.css'],\n})\nexport class CategoryListComponent {\n  categories: Category[] = [];\n  pagedData: Category[] = [];\n  newCategoryName: string = '';\n  newCategoryDate: string = '';\n  currentPage = 1;\n  itemsPerPage = 10;\n  addCategoryForm: boolean = false;\n\n  constructor(\n    private categoryService: CategoryService,\n    private router: Router,\n    private postService: \n  ) {\n    if (this.categoryService.getCategories().length === 0)\n      this.categoryService.setCategories();\n\n    this.categories = this.categoryService.getCategories();\n  }\n\n  handleDeleteClick($event: number) {\n    this.categoryService.deleteCategory($event);\n    this.categories = this.categoryService.getCategories();\n  }\n\n  handleDetailClick($event: number) {\n    this.router.navigate(['categorylist', $event]);\n  }\n\n  ngOnInit() {\n    this.pageChanged(this.currentPage);\n  }\n\n  pageChanged(page: number): void {\n    const startIndex = (page - 1) * this.itemsPerPage;\n    const endIndex = startIndex + this.itemsPerPage;\n    this.pagedData = this.categories.slice(startIndex, endIndex);\n    this.currentPage = page;\n    if (this.pagedData.length === 0 && this.currentPage > 1)\n      this.previousPage();\n  }\n\n  previousPage(): void {\n    if (this.currentPage > 1) {\n      this.currentPage--;\n      this.pageChanged(this.currentPage);\n    }\n  }\n\n  nextPage(): void {\n    if (this.currentPage < this.totalPages) {\n      this.currentPage++;\n      this.pageChanged(this.currentPage);\n    }\n  }\n\n  get totalPages(): number {\n    return Math.ceil(this.categories.length / this.itemsPerPage);\n  }\n\n  handleAddCategory() {\n    this.addCategoryForm = !this.addCategoryForm;\n  }\n\n \n  handleSaveClick() {\n    if (this.newCategoryName == '' || this.newCategoryDate === '')\n      alert('Name or Creation Date cannot be empty.');\n    else {\n      this.categoryService.addCategory(\n        this.newCategoryName,\n        this.newCategoryDate\n      );\n      this.pageChanged(this.currentPage);\n      this.handleCancelClick();\n    }\n  }\n\n handleCancelClick() {\n    this.addCategoryForm = false;\n    this.newCategoryName = '';\n    this.newCategoryDate = '';\n  }\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAUlC,WAAMC,qBAAqB,GAA3B,MAAMA,qBAAqB;EAShCC,YACUC,eAAgC,EAChCC,MAAc,EACdC,WAAY;IAFZ,KAAAF,eAAe,GAAfA,eAAe;IACf,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,WAAW,GAAXA,WAAW;IAXrB,KAAAC,UAAU,GAAe,EAAE;IAC3B,KAAAC,SAAS,GAAe,EAAE;IAC1B,KAAAC,eAAe,GAAW,EAAE;IAC5B,KAAAC,eAAe,GAAW,EAAE;IAC5B,KAAAC,WAAW,GAAG,CAAC;IACf,KAAAC,YAAY,GAAG,EAAE;IACjB,KAAAC,eAAe,GAAY,KAAK;IAO9B,IAAI,IAAI,CAACT,eAAe,CAACU,aAAa,EAAE,CAACC,MAAM,KAAK,CAAC,EACnD,IAAI,CAACX,eAAe,CAACY,aAAa,EAAE;IAEtC,IAAI,CAACT,UAAU,GAAG,IAAI,CAACH,eAAe,CAACU,aAAa,EAAE;EACxD;EAEAG,iBAAiBA,CAACC,MAAc;IAC9B,IAAI,CAACd,eAAe,CAACe,cAAc,CAACD,MAAM,CAAC;IAC3C,IAAI,CAACX,UAAU,GAAG,IAAI,CAACH,eAAe,CAACU,aAAa,EAAE;EACxD;EAEAM,iBAAiBA,CAACF,MAAc;IAC9B,IAAI,CAACb,MAAM,CAACgB,QAAQ,CAAC,CAAC,cAAc,EAAEH,MAAM,CAAC,CAAC;EAChD;EAEAI,QAAQA,CAAA;IACN,IAAI,CAACC,WAAW,CAAC,IAAI,CAACZ,WAAW,CAAC;EACpC;EAEAY,WAAWA,CAACC,IAAY;IACtB,MAAMC,UAAU,GAAG,CAACD,IAAI,GAAG,CAAC,IAAI,IAAI,CAACZ,YAAY;IACjD,MAAMc,QAAQ,GAAGD,UAAU,GAAG,IAAI,CAACb,YAAY;IAC/C,IAAI,CAACJ,SAAS,GAAG,IAAI,CAACD,UAAU,CAACoB,KAAK,CAACF,UAAU,EAAEC,QAAQ,CAAC;IAC5D,IAAI,CAACf,WAAW,GAAGa,IAAI;IACvB,IAAI,IAAI,CAAChB,SAAS,CAACO,MAAM,KAAK,CAAC,IAAI,IAAI,CAACJ,WAAW,GAAG,CAAC,EACrD,IAAI,CAACiB,YAAY,EAAE;EACvB;EAEAA,YAAYA,CAAA;IACV,IAAI,IAAI,CAACjB,WAAW,GAAG,CAAC,EAAE;MACxB,IAAI,CAACA,WAAW,EAAE;MAClB,IAAI,CAACY,WAAW,CAAC,IAAI,CAACZ,WAAW,CAAC;;EAEtC;EAEAkB,QAAQA,CAAA;IACN,IAAI,IAAI,CAAClB,WAAW,GAAG,IAAI,CAACmB,UAAU,EAAE;MACtC,IAAI,CAACnB,WAAW,EAAE;MAClB,IAAI,CAACY,WAAW,CAAC,IAAI,CAACZ,WAAW,CAAC;;EAEtC;EAEA,IAAImB,UAAUA,CAAA;IACZ,OAAOC,IAAI,CAACC,IAAI,CAAC,IAAI,CAACzB,UAAU,CAACQ,MAAM,GAAG,IAAI,CAACH,YAAY,CAAC;EAC9D;EAEAqB,iBAAiBA,CAAA;IACf,IAAI,CAACpB,eAAe,GAAG,CAAC,IAAI,CAACA,eAAe;EAC9C;EAGAqB,eAAeA,CAAA;IACb,IAAI,IAAI,CAACzB,eAAe,IAAI,EAAE,IAAI,IAAI,CAACC,eAAe,KAAK,EAAE,EAC3DyB,KAAK,CAAC,wCAAwC,CAAC,CAAC,KAC7C;MACH,IAAI,CAAC/B,eAAe,CAACgC,WAAW,CAC9B,IAAI,CAAC3B,eAAe,EACpB,IAAI,CAACC,eAAe,CACrB;MACD,IAAI,CAACa,WAAW,CAAC,IAAI,CAACZ,WAAW,CAAC;MAClC,IAAI,CAAC0B,iBAAiB,EAAE;;EAE5B;EAEDA,iBAAiBA,CAAA;IACd,IAAI,CAACxB,eAAe,GAAG,KAAK;IAC5B,IAAI,CAACJ,eAAe,GAAG,EAAE;IACzB,IAAI,CAACC,eAAe,GAAG,EAAE;EAC3B;CAED;AApFYR,qBAAqB,GAAAoC,UAAA,EALjCrC,SAAS,CAAC;EACTsC,QAAQ,EAAE,mBAAmB;EAC7BC,WAAW,EAAE,gCAAgC;EAC7CC,SAAS,EAAE,CAAC,+BAA+B;CAC5C,CAAC,C,EACWvC,qBAAqB,CAoFjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}